name: Update RPZ Blocklists

on:
  schedule:
    - cron: '0 * * * *' # Runs every hour
  push:
    branches:
      - main
      - feature/hash-checking
  workflow_dispatch:

env:
  RPZ_DIRS: ads malware misc phishing social tracking # Supported categories, add here new categories if needed

jobs:
  update-rpz:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Pre-check input files
        run: |
          if [ ! -f tools/urllist.txt ]; then
            echo "Error: tools/urllist.txt not found!"
            exit 1
          fi
          if [ ! -f tools/list-mappings.csv ]; then
            echo "Error: tools/list-mappings.csv not found!"
            exit 1
          fi

      - name: Set up Perl
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: '5.36'

      - name: Cache CPAN modules
        uses: actions/cache@v4
        with:
          path: ~/.cpan
          key: ${{ runner.os }}-cpan-${{ hashFiles('tools/cpanfile') }}
          restore-keys: ${{ runner.os }}-cpan-

      - name: Install Perl dependencies
        run: |
          cpanm --installdeps --notest ./tools
        env:
          PERL5LIB: ${{ github.workspace }}/local/lib/perl5:${{ github.workspace }}/local/lib/perl5/x86_64-linux

      - name: Generate RPZ files
        id: generate-rpz
        run: |
          export PERLIO=:unix
          mkdir -p tools/logs
          rm -f tools/logs/*.log tools/logs/*.txt
          perl tools/blocklist2rpz-multi.pl \
            -w \
            -d . \
            -l tools/urllist.txt \
            -m tools/list-mappings.csv \
            -e tools/logs/error.log \
            -s tools/logs/status.txt \
            --validate \
            --validation-report tools/logs/validation.txt \
            --debug-level=1

      - name: Check for outdated sources
        run: |
          perl -MTime::Piece -e '
            use strict;
            use Text::CSV;
            my $csv = Text::CSV->new({ binary => 1, sep_char => "," });
            open my $fh, "<:encoding(utf8)", "tools/source-hashes.csv" or die $!;
            $csv->getline($fh); # Skip header
            my @outdated;
            while (my $row = $csv->getline($fh)) {
              my ($url, $hash, $etag, $last_modified, $last_checked, $failed_attempts) = @$row;
              next unless $last_checked;
              my $last_updated = Time::Piece->strptime($last_checked, "%Y-%m-%dT%H:%M:%SZ");
              if ((gmtime() - $last_updated) > 30 * 86400) {
                push @outdated, [$url, $last_checked];
              }
            }
            close $fh;
            if (@outdated) {
              print "Outdated sources:\n";
              print join("\n", map { "Source: $_->[0], Last checked: $_->[1]" } @outdated) . "\n";
              open my $out_fh, ">", "tools/logs/outdated.txt" or die $!;
              print $out_fh join("\n", map { "Source: $_->[0], Last checked: $_->[1]" } @outdated) . "\n";
              close $out_fh;
            }
          '

      - name: Create issue for outdated sources
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            if (fs.existsSync('tools/logs/outdated.txt')) {
              const content = fs.readFileSync('tools/logs/outdated.txt', 'utf8');
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Outdated Sources Detected',
                body: `The following sources are outdated (not updated in the last 30 days):\n\n${content}`,
              });
            }

      - name: Create issue for failed sources
        if: always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            if (fs.existsSync('tools/logs/error.log')) {
              const content = fs.readFileSync('tools/logs/error.log', 'utf8');
              if (content.includes('Reset hash') || content.includes('failed for')) {
                const sources = content.match(/(?:Reset hash for|HEAD request failed for|Could not fetch) (.+?)(?=(?:\n|$| after|:\s))/g) || [];
                if (sources.length > 0) {
                  const failedSources = sources.map(s => s.replace(/^(Reset hash for|HEAD request failed for|Could not fetch) /, '')).join('\n');
                  await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: 'Failed Sources Detected',
                    body: `The following sources failed or had their hashes reset:\n\n${failedSources}\n\nFull log:\n${content}`,
                  });
                }
              }
            }

      - name: Commit and push changes
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git add ads/ malware/ misc/ phishing/ social/ tracking/ tools/logs/ tools/source-hashes.csv SOURCES.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Epic update: Enhanced blocklist2rpz-multi.pl with ETag/Hash change detection, SOURCES.md generation, debug-level control, robust error handling, and sorted urllist/list-mappings for ultimate clarity! ($(date -u))"
            git pull --rebase origin ${{ github.ref_name }}
            git push origin ${{ github.ref_name }}
          fi

      - name: Upload logs as artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs
          path: tools/logs/
          retention-days: 7
